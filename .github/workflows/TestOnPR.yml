name: "CI - On main/dev/release branches"
on:
  pull_request:
    branches:
      - dev
      - main
      - 'releases/**'
    paths-ignore:
      - 'debian/changelog'
jobs:

  Test-Project:
    timeout-minutes: 30
    name: "Sanity checks"
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: install static-checks-requirements
      run: |
        python3 -m pip install docker-compose yamllint

    - name: Yamllint
      uses: karancode/yamllint-github-action@master
      with:
        yamllint_file_or_dir: docker-compose.yml
        yamllint_strict: false
        yamllint_comment: true
        yamllint_config_filepath: .yamllint-config.yml
      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Validate json
      uses: anyone-developer/anyone-validate-json@main
      with:
        file-extension: '.json'
        ignore-files: ''
        ignore-directories: '.git'
        read-path: 'robots'

    - name: run docker-compose lint
      run: |
        docker-compose -f docker-compose.yml config

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: registry.cloud.mov.ai
        username: ${{secrets.PORTUS_APP_USER}}
        password: ${{secrets.PORTUS_APP_TOKEN}}

    - name: prepare docker-compose cluster
      run: |
        mkdir -p ./{logs,shared,userspace,models_database} || true
        sudo chown 1000:1000 ./{logs,shared,userspace,models_database} -R
        #timeout 90 docker-compose -f docker-compose.yml up

    - name: run docker-compose cluster
      uses: isbang/compose-action@v1.0.0
      with:
        compose-file: './docker-compose.yml'
        down-flags: '--volumes'

    - name: test cluster frontend
      run: |
        export url=http://localhost:5004/token-auth/
        # retry for 1 minute
        count=10
        set +e
        for i in $(seq $count); do
          status_code=$(curl -s -o /dev/null --cookie-jar cookies --header 'Content-Type: application/json' -X POST --data '{"username":"movai","password":"movai","remember":true}' -w "%{http_code}" $url)
          if [ $status_code == 200 ]; then
            break
          fi
          echo "Waiting for MOVAI Studio availability (ret:$status_code)"
          sleep 10
        done
        [ $status_code == 200 ] && exit 0

  Pack-Project:
    timeout-minutes: 30
    name: "Pack Checks"
    runs-on: ubuntu-20.04
    container:
      image: registry.cloud.mov.ai/devops/ros-buildtools-noetic:main
      options: --user root
      credentials:
        username: ${{secrets.PORTUS_APP_USER}}
        password: ${{secrets.PORTUS_APP_TOKEN}}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Find Package details
      id: vars
      run: |
        PACKAGE_VERSION=$(dpkg-parsechangelog --show-field Version)
        PACKAGE_NAME=$(dpkg-parsechangelog --show-field Source)

        echo ::set-output name=pkg_name::$PACKAGE_NAME
        echo ::set-output name=pkg_version::$PACKAGE_VERSION

    - name: Raise Version
      id: vars-after-raise
      run: |
        PACKAGE_VERSION=${{ steps.vars.outputs.pkg_version }}
        main_version=${PACKAGE_VERSION%-*}
        build_id="${PACKAGE_VERSION#*-}"
        raised_buildid=$(($build_id+1))
        RAISED_PACKAGE_VERSION="$main_version-$raised_buildid"
        echo ::set-output name=pkg_version::$RAISED_PACKAGE_VERSION

    - name: Pack debian
      run: |
        git config --global user.name '${{ secrets.RAISE_BOT_COMMIT_USER }}'
        git config --global user.email '${{ secrets.RAISE_BOT_COMMIT_MAIL }}'

        apt-get update
        apt-get install -y devscripts equivs git-buildpackage

        # Set the install command to be used by mk-build-deps (use --yes for non-interactive)
        install_tool="apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes"

        # Install build dependencies automatically
        mk-build-deps --install --tool="${install_tool}" debian/control

        # Add Snapshot version into changelog and commit it
        gbp dch --ignore-branch -N ${{ steps.vars-after-raise.outputs.pkg_version }} -S -c

        # Build .deb with binaries only
        dpkg-buildpackage -b --unsigned-source --unsigned-changes

        # Store generated .deb
        mkdir artifacts && \
        cp ../*.deb artifacts