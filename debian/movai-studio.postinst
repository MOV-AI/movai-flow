#!/bin/bash
# post install script

# Function to output to log and console.
#
# Usage:
#   $1 =  Message (should be "Text Message" quoted).
#   $2 =  Optional "0" or "1" flag.   "1" adds "(extracted from Preferences.xml)" message
#
#   Note: Blank lines (Null text strings "") are not written to the system log.  There is no need to waste that space.

SERVICENAME=movai-studio
APP_PATH=/usr/share/$SERVICENAME/launch
CONFIG_PATH=/etc/$SERVICENAME

Output() {
  # Prepare base message
  Message="MOV.AI Studio install: $1"

  # Output the message even if a blank message (make output nice)
  echo "$Message"

  # Return if blank.
  if [ "$1" = "" ]; then
    return
  fi

  # Output to log
  if which journalctl > /dev/null 2>&1
  then
    echo MESSAGE="$Message" | logger --journald
  else
    echo "$Message" | logger
  fi
}

# Load configuration variable values from configuration transfer file as needed
GetConfig() {
  RetVal=""
  InstConfig=/tmp/movai-studio-installer.log
  RetVal="$(grep ^$1= $InstConfig | sed -e 's/^.*=//'| tr -d '"')"
  echo "$RetVal"
}

# exit on major error
set -e
HaveNvidia="$(GetConfig HaveNvidia)"
HaveResources="$(GetConfig HaveResources)"
#NeedUser="$(GetConfig NeedUser)"

if [ $HaveResources -gt 0 ]; then
  Output "Enough RAM,CPU, DISK resources found"
else
  Output "Not Enough RAM,CPU, DISK resources found"
  exit 1
fi

if [ "$1" == "configure" ]; then
    Output "Preparing $SERVICENAME config"
    mkdir -p $CONFIG_PATH/

    if [ -f $CONFIG_PATH/config.env ]; then
      Output "Re-using $SERVICENAME config"
    else
      FLEET_TOKEN="$(echo movai:ce-studio$RANDOM | base64 -w0)"
      echo FLEET_TOKEN=$FLEET_TOKEN > $CONFIG_PATH/config.env
      Output "Created $SERVICENAME fleet token"
    fi

    Output "Reloading systemd config"
    systemctl daemon-reload || true

    Output "Enabling $SERVICENAME"
    systemctl enable $SERVICENAME.service

    mkdir -p $APP_PATH/{logs,shared,userspace,models_database}
    sudo chown 1000:1000 $APP_PATH/{logs,shared,userspace,models_database} -R

    Output "Starting $SERVICENAME"
    systemctl start $SERVICENAME.service
elif [ "$1" == "abort-remove" ]; then
    Output "Stopping $SERVICENAME"
    systemctl stop $SERVICENAME.service || true

    Output "Disabling $SERVICENAME"
    systemctl disable $SERVICENAME.service || true

    Output "Removing $SERVICENAME"
    rm /usr/lib/systemd/system/$SERVICENAME.service || true

    Output "Reloading systemd config"
    systemctl daemon-reload || true
    systemctl reset-failed || true
fi